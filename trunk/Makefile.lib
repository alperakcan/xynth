
#
# Makefile.lib
# Alper Akcan <distchx@yahoo.com>
# (C) 2007 
#

CFLAGS += -Wall -pipe -g -O2 -fsigned-char -fno-strict-aliasing

MAKE       := $(MAKE) --no-print-directory

CC         := gcc
LD         := ld
AR         := ar rcs
RANLIB     := ranlib
STRIP      := strip

HOSTCC     := gcc
HOSTLD     := ld
HOSTAR     := ar rcs
HOSTRANLIB := ranlib
HOSTSTRIP  := strip

SED        := sed

CD         := cd
CP         := cp -af
RM         := rm -rf
MKDIR      := mkdir -p

#WIDGETC    := widgetc

all:

ifneq ($(V)$(VERBOSE),)
    verbose := ver
else
    verbose := pur
endif

pur_objects = $(CURDIR)/$$@
#pur_objects = $$(subst .$1/,,$$@)

#
# PUR
#
pur_disp_depend.c       = echo "  DEP        $(pur_objects)"
pur_disp_compile.c      = echo "  CC         $(pur_objects)"
pur_disp_link.c         = echo "  LINK       $(pur_objects)"
pur_disp_link_so.c      = echo "  LINKSO     $(pur_objects)"

pur_disp_depend.c.host  = echo "  HOSTDEP    $(pur_objects)"
pur_disp_compile.c.host = echo "  HOSTCC     $(pur_objects)"
pur_disp_link.c.host    = echo "  HOSTLINK   $(pur_objects)"
pur_disp_link_so.c.host = echo "  HOSTLINKSO $(pur_objects)"

pur_disp_ar             = echo "  AR         $(pur_objects)"
pur_disp_ranlib         = echo "  RANLIB     $(pur_objects)"
pur_disp_ld             = echo "  LD         $(pur_objects)"

pur_disp_ld.host        = echo "  HOSTLD     $(pur_objects)"

pur_disp_cp             = echo "  CP         $(pur_objects)"
pur_disp_mkdir          = echo "  MKDIR      $(pur_objects)"
pur_disp_clean          = echo "  CLEAN      $$(subst _clean,,$(pur_objects))"

pur_disp_widgetc        = echo "  WIDGETC    $(pur_objects)"

#
# VER
#
ver_disp_depend.c       = echo "$(subst ",\",$(cmd_depend.c))"
ver_disp_compile.c      = echo "$(subst ",\",$(cmd_compile.c))"
ver_disp_link.c         = echo "$(subst ",\",$(cmd_link.c))"
ver_disp_link_so.c      = echo "$(subst ",\",$(cmd_link_so.c))"

ver_disp_depend.c.host  = echo "$(subst ",\",$(cmd_depend.c.host))"
ver_disp_compile.c.host = echo "$(subst ",\",$(cmd_compile.c.host))"
ver_disp_link.c.host    = echo "$(subst ",\",$(cmd_link.c.host))"
ver_disp_link_so.c.host = echo "$(subst ",\",$(cmd_link_so.c.host))"

ver_disp_ar             = echo "$(subst ",\",$(cmd_ar))"
ver_disp_ranlib         = echo "$(subst ",\",$(cmd_ranlib))"
ver_disp_ld             = echo "$(subst ",\",$(cmd_ld))"

ver_disp_ld.host        = echo "$(subst ",\",$(cmd_ld.host))"

ver_disp_cp             = echo "$(subst ",\",$(cmd_cp))"
ver_disp_mkdir          = echo "$(subst ",\",$(cmd_mkdir))"
ver_disp_clean          = echo "$(subst ",\",$(cmd_clean) $1 .$1 $$@.cmd)"

ver_disp_widgetc        = echo "$(subst ",\",$(cmd_widgetc))"

#
# DISP
#
disp_depend.c       = $($(verbose)_disp_depend.c)
disp_compile.c      = $($(verbose)_disp_compile.c)
disp_link.c         = $($(verbose)_disp_link.c)
disp_link_so.c      = $($(verbose)_disp_link_so.c)

disp_depend.c.host  = $($(verbose)_disp_depend.c.host)
disp_compile.c.host = $($(verbose)_disp_compile.c.host)
disp_link.c.host    = $($(verbose)_disp_link.c.host)
disp_link_so.c.host = $($(verbose)_disp_link_so.c.host)

disp_ar             = $($(verbose)_disp_ar)
disp_ranlib         = $($(verbose)_disp_ranlib)
disp_ld             = $($(verbose)_disp_ld)

disp_ld.host        = $($(verbose)_disp_ld.host)

disp_cp             = $($(verbose)_disp_cp)
disp_mkdir          = $($(verbose)_disp_mkdir)
disp_clean          = $($(verbose)_disp_clean)

disp_widgetc        = $($(verbose)_disp_widgetc)

#
# _CMD
#
_cmd_depend.c       = $(CC) $(CFLAGS) $(CPPFLAGS) $($1_cflags) $($1_cppflags) $($1_includes) -M $$< | $(SED) 's,\($$*\.o\) *:,.$1/\1 $$@: ,' > $$@
_cmd_compile.c      = $(CC) $(CFLAGS) $(CPPFLAGS) $($1_cflags) $($1_cppflags) $($1_includes) -c -o $$@ $$<
_cmd_link.c         = $(CC) $($1_libraries) -o $$@ $$^ $($1_ldflags) $(LDFLAGS)
_cmd_link_so.c      = $(CC) $($1_libraries) -o $$@ $$^ $($1_ldflags) $(LDFLAGS) -shared

_cmd_depend.c.host  = $(HOSTCC) $(CFLAGS) $(CPPFLAGS) $($1_cflags) $($1_cppflags) $($1_includes) -M $$< | $(SED) 's,\($$*\.o\) *:,.$1/\1 $$@: ,' > $$@
_cmd_compile.c.host = $(HOSTCC) $(CFLAGS) $(CPPFLAGS) $($1_cflags) $($1_cppflags) $($1_includes) -c -o $$@ $$<
_cmd_link.c.host    = $(HOSTCC) $(CFLAGS) $($1_libraries) -o $$@ $$^ $($1_ldflags) $(LDFLAGS)
_cmd_link_so.c.host = $(HOSTCC) $(CFLAGS) $($1_libraries) -o $$@ $$^ $($1_ldflags) $(LDFLAGS) -shared

_cmd_ar             = $(AR) $$@ $$^
_cmd_ranlib         = $(RANLIB) $$@
_cmd_ld             = $(LD) -r -o $$@ $$^

_cmd_ld.host        = $(HOSTLD) -r -o $$@ $$^

_cmd_cp             = $(CP) $$< $$@
_cmd_mkdir          = $(MKDIR) $$@
_cmd_clean          = $(RM)

_cmd_widgetc        = $(CD) .$1; $(WIDGETC) -f ../$$< -o $$(subst .xws,,$$<)

#
# CMD
#
cmd_depend.c       = echo "$(_cmd_depend.c)" > $$@.cmd       ; $(_cmd_depend.c)
cmd_compile.c      = echo "$(_cmd_compile.c)" > $$@.cmd      ; $(_cmd_compile.c)
cmd_link.c         = echo "$(_cmd_link.c)" > $$@.cmd         ; $(_cmd_link.c)
cmd_link_so.c      = echo "$(_cmd_link_so.c)" > $$@.cmd      ; $(_cmd_link_so.c)

cmd_depend.c.host  = echo "$(_cmd_depend.c.host)" > $$@.cmd  ; $(_cmd_depend.c.host)
cmd_compile.c.host = echo "$(_cmd_compile.c.host)" > $$@.cmd ; $(_cmd_compile.c.host)
cmd_link.c.host    = echo "$(_cmd_link.c.host)" > $$@.cmd    ; $(_cmd_link.c.host)
cmd_link_so.c.host = echo "$(_cmd_link_so.c.host)" > $$@.cmd ; $(_cmd_link_so.c.host)

cmd_ar             = echo "$(_cmd_ar)" > $$@.cmd             ; $(_cmd_ar)
cmd_ranlib         = echo "$(_cmd_ranlib)" >> $$@.cmd        ; $(_cmd_ranlib)
cmd_ld             = echo "$(_cmd_ld)" > $$@.cmd             ; $(_cmd_ld)

cmd_ld.host        = echo "$(_cmd_ld.host)" > $$@.cmd        ; $(_cmd_ld.host)

cmd_cp             = $(_cmd_cp)
cmd_mkdir          = $(_cmd_mkdir)
cmd_clean          = echo "$(_cmd_clean) $1 .$1" > $$@.cmd   ; $(_cmd_clean)

cmd_widgetc        = echo "$(_cmd_widgetc)" > $$@.cmd        ; $(_cmd_widgetc)

#
# DO
#
do_depend.c       = @$(MKDIR) .$1; $(disp_depend.c)       ; $(cmd_depend.c)
do_compile.c      = @$(disp_compile.c)      ; $(cmd_compile.c)
do_link.c         = @$(disp_link.c)         ; $(cmd_link.c)
do_link_so.c      = @$(disp_link_so.c)      ; $(cmd_link_so.c)

do_depend.c.host  = @$(MKDIR) .$1; $(disp_depend.c.host)  ; $(cmd_depend.c.host)
do_compile.c.host = @$(disp_compile.c.host) ; $(cmd_compile.c.host)
do_link.c.host    = @$(disp_link.c.host)    ; $(cmd_link.c.host)
do_link_so.c.host = @$(disp_link_so.c.host) ; $(cmd_link_so.c.host)

do_ar             = @$(disp_ar)             ; $(cmd_ar)
do_ranlib         = @$(disp_ranlib)         ; $(cmd_ranlib)
do_ld             = @$(disp_ld)             ; $(cmd_ld)

do_ld.host        = @$(disp_ld.host)        ; $(cmd_ld.host)

do_cp             = @$(disp_cp)             ; $(cmd_cp)
do_mkdir          = @$(disp_mkdir)          ; $(cmd_mkdir)
do_clean          = @$(disp_clean)          ; $(cmd_clean)

do_widgetc        = @$(MKDIR) .$1; $(disp_widgetc)        ; $(cmd_widgetc)

#
# Functions
#

define target-defaults_base
    $(eval $1_sources   = $(filter %.c,$2))
    $(eval $1_headers   = $(filter %.h,$2))
    $(eval $1_wsources  = $(addprefix .$1/, $(subst .xws,_xml.c,$(filter %.xws,$2))))
    $(eval $1_wheaders  = $(addprefix .$1/, $(subst .xws,_xml.h,$(filter %.xws,$2))))
    $(eval $1_objects   = $(addprefix .$1/, $(subst .c,.o,$($1_sources))))
    $(eval $1_wobjects  = $(subst .c,.o,$($1_wsources)))
    $(eval $1_eobjects  = $(filter %.o,$2))
    $(eval $1_depends   = $(addprefix .$1/, $(subst .c,.dep,$($1_sources))))
    $(eval $1_cflags    = $($1_cflags-y))
    $(eval $1_cppflags  = $($1_cppflags-y))
    $(eval $1_includes  = $(addprefix -I, $($1_includes-y)))
    $(eval $1_libraries = $(addprefix -L, $($1_libraries-y)))
    $(eval $1_ldflags   = $($1_ldflags-y))
    
    targets-blds += $1
    targets-objs += $($1_objects)
    targets-deps += $($1_depends)
    targets-clns += $1_clean
    
    $($1_depends): $($1_depends-y) $($1_wheaders)

    $($1_wsources): .$1/%_xml.c: %.xws
	$(do_widgetc)
    
    $($1_wheaders): .$1/%_xml.h: %.xws
	$(do_widgetc)

    $1: .$1/$1
	$(do_cp)
    
    .$1/$1: $($1_wobjects) $($1_objects) $($1_eobjects)

    $1_clean: __FORCE
	$(do_clean) $1 .$1 $$@.cmd
endef

define target-defaults
    $(eval $(call target-defaults_base,$1,$2))
    
    $($1_depends): .$1/%.dep: %.c
	$(do_depend.c)

    $($1_wobjects): .$1/%.o: .$1/%.c
	$(do_compile.c)

    $($1_objects): .$1/%.o: %.c
	$(do_compile.c)
endef

define target_host-defaults
    $(eval $(call target-defaults_base,$1,$2))

    $($1_depends): .$1/%.dep: %.c
	$(do_depend.c.host)

    $($1_wobjects): .$1/%.o: .$1/%.c
	$(do_compile.c)

    $($1_objects): .$1/%.o: %.c
	$(do_compile.c.host)
endef

define target-variables
    $(eval $(call target-defaults,$1,$2))

    .$1/$1:
	$(do_link.c)
endef

define target_so-variables
    $(eval $(call target-defaults,$1,$2))

    .$1/$1:
	$(do_link_so.c)
endef

define target_a-variables
    $(eval $(call target-defaults,$1,$2))

    .$1/$1:
	$(do_ar)
	$(do_ranlib)
endef

define target_o-variables
    $(eval $(call target-defaults,$1,$2))

    .$1/$1:
	$(do_ld)
endef

define target_host-variables
    $(eval $(call target_host-defaults,$1,$2))
    
    .$1/$1:
	$(do_link.c.host)
endef

define target_o_host-variables
    $(eval $(call target_host-defaults,$1,$2))
    
    .$1/$1:
	$(do_ld.host)
endef

define target_empty-defaults
    targets-empty += $1
    
    $(addsuffix _clean, $1): __FORCE
	$(do_clean) $1 .$1 $$@.cmd
endef

define subdir_empty-defaults
    $(addsuffix _$2, $1): __FORCE
	@$($1_makeflags-y) $(MAKE) -C $$(subst _$2,,$$@) $2
endef

define subdir-defaults
    subdirs += $1
    
    $1: $1_all

    $(addsuffix _all, $1): $($1_depends-y) __FORCE
	@$($1_makeflags-y) $(MAKE) -C $$(subst _all,,$$@) all

    $(addsuffix _dist, $1): $($1_depends-y) __FORCE
	@$($1_makeflags-y) $(MAKE) -C $$(subst _dist,,$$@) dist

    $(addsuffix _clean, $1): __FORCE
	@$($1_makeflags-y) $(MAKE) -C $$(subst _clean,,$$@) clean
endef

#
# Definitions
#

# generate target variables

$(eval $(foreach T,$(target-y),$(eval $(call target-variables,$T,$($T_files-y)))))
$(eval $(foreach T,$(target_o-y),$(eval $(call target_o-variables,$T,$($T_files-y)))))
$(eval $(foreach T,$(target_a-y),$(eval $(call target_a-variables,$T,$($T_files-y)))))
$(eval $(foreach T,$(target_so-y),$(eval $(call target_so-variables,$T,$($T_files-y)))))

$(eval $(foreach T,$(target.host-y),$(eval $(call target_host-variables,$T,$($T_files-y)))))
$(eval $(foreach T,$(target_o.host-y),$(eval $(call target_o_host-variables,$T,$($T_files-y)))))

$(eval $(foreach T,$(target-n),$(eval $(call target_empty-defaults,$T))))
$(eval $(foreach T,$(target-),$(eval $(call target_empty-defaults,$T))))

$(eval $(foreach T,$(target_so-n),$(eval $(call target_empty-defaults,$T))))
$(eval $(foreach T,$(target_so-),$(eval $(call target_empty-defaults,$T))))

$(eval $(foreach T,$(target_a-n),$(eval $(call target_empty-defaults,$T))))
$(eval $(foreach T,$(target_a-),$(eval $(call target_empty-defaults,$T))))

$(eval $(foreach T,$(target_o-n),$(eval $(call target_empty-defaults,$T))))
$(eval $(foreach T,$(target_o-),$(eval $(call target_empty-defaults,$T))))

# generate subdir targets

$(eval $(foreach S,$(subdir-y),$(eval $(call subdir-defaults,$S))))

$(eval $(foreach S,$(subdir-n),$(eval $(call subdir_empty-defaults,$S,clean))))
$(eval $(foreach S,$(subdir-),$(eval $(call subdir_empty-defaults,$S,clean))))

# generic tags

all: $(addsuffix _all, $(subdirs))
all: $(targets-blds)
all: __FORCE

dist: $(addsuffix _dist, $(subdirs))
dist: all
dist: __FORCE

clean: $(addsuffix _clean, $(subdir-y) $(subdir-n) $(subdir-))
clean: $(targets-clns)
clean: $(addsuffix _clean, $(targets-empty))
clean: __FORCE

__FORCE:
	@true

ifneq "$(MAKECMDGOALS)" "clean"
    -include $(targets-deps)
endif
