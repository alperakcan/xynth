diff -Naur SDL-1.2.10/README.Xynth SDL-1.2.10-xynth/README.Xynth
--- SDL-1.2.10/README.Xynth	1970-01-01 02:00:00.000000000 +0200
+++ SDL-1.2.10-xynth/README.Xynth	2006-05-20 05:05:57.000000000 +0300
@@ -0,0 +1,8 @@
+www.xynth.org
+
+Alper Akcan <distchx@yahoo.com>
+
+./configure
+make
+make install
+export SDL_VIDEODRIVER=xynth
diff -Naur SDL-1.2.10/configure SDL-1.2.10-xynth/configure
--- SDL-1.2.10/configure	2006-05-17 09:53:45.000000000 +0300
+++ SDL-1.2.10-xynth/configure	2006-05-20 05:05:57.000000000 +0300
@@ -1090,6 +1090,7 @@
   --enable-video-ps2gs    use PlayStation 2 GS video driver [default=yes]
   --enable-video-ggi      use GGI video driver [default=no]
   --enable-video-svga     use SVGAlib video driver [default=yes]
+  --enable-video-xynth    use The Xynth Windowing System default=yes
   --enable-video-vgl      use VGL video driver [default=yes]
   --enable-video-wscons   use wscons video driver [default=yes]
   --enable-video-aalib    use AAlib video driver [default=no]
@@ -3489,7 +3490,7 @@
   ;;
 *-*-irix6*)
   # Find out which ABI we are using.
-  echo '#line 3492 "configure"' > conftest.$ac_ext
+  echo '#line 3493 "configure"' > conftest.$ac_ext
   if { (eval echo "$as_me:$LINENO: \"$ac_compile\"") >&5
   (eval $ac_compile) 2>&5
   ac_status=$?
@@ -5221,7 +5222,7 @@
 
 
 # Provide some information about the compiler.
-echo "$as_me:5224:" \
+echo "$as_me:5225:" \
      "checking for Fortran 77 compiler version" >&5
 ac_compiler=`set X $ac_compile; echo $2`
 { (eval echo "$as_me:$LINENO: \"$ac_compiler --version </dev/null >&5\"") >&5
@@ -6294,11 +6295,11 @@
    -e 's:.*FLAGS}\{0,1\} :&$lt_compiler_flag :; t' \
    -e 's: [^ ]*conftest\.: $lt_compiler_flag&:; t' \
    -e 's:$: $lt_compiler_flag:'`
-   (eval echo "\"\$as_me:6297: $lt_compile\"" >&5)
+   (eval echo "\"\$as_me:6298: $lt_compile\"" >&5)
    (eval "$lt_compile" 2>conftest.err)
    ac_status=$?
    cat conftest.err >&5
-   echo "$as_me:6301: \$? = $ac_status" >&5
+   echo "$as_me:6302: \$? = $ac_status" >&5
    if (exit $ac_status) && test -s "$ac_outfile"; then
      # The compiler can only warn and ignore the option if not recognized
      # So say no if there are warnings other than the usual output.
@@ -6562,11 +6563,11 @@
    -e 's:.*FLAGS}\{0,1\} :&$lt_compiler_flag :; t' \
    -e 's: [^ ]*conftest\.: $lt_compiler_flag&:; t' \
    -e 's:$: $lt_compiler_flag:'`
-   (eval echo "\"\$as_me:6565: $lt_compile\"" >&5)
+   (eval echo "\"\$as_me:6566: $lt_compile\"" >&5)
    (eval "$lt_compile" 2>conftest.err)
    ac_status=$?
    cat conftest.err >&5
-   echo "$as_me:6569: \$? = $ac_status" >&5
+   echo "$as_me:6570: \$? = $ac_status" >&5
    if (exit $ac_status) && test -s "$ac_outfile"; then
      # The compiler can only warn and ignore the option if not recognized
      # So say no if there are warnings other than the usual output.
@@ -6666,11 +6667,11 @@
    -e 's:.*FLAGS}\{0,1\} :&$lt_compiler_flag :; t' \
    -e 's: [^ ]*conftest\.: $lt_compiler_flag&:; t' \
    -e 's:$: $lt_compiler_flag:'`
-   (eval echo "\"\$as_me:6669: $lt_compile\"" >&5)
+   (eval echo "\"\$as_me:6670: $lt_compile\"" >&5)
    (eval "$lt_compile" 2>out/conftest.err)
    ac_status=$?
    cat out/conftest.err >&5
-   echo "$as_me:6673: \$? = $ac_status" >&5
+   echo "$as_me:6674: \$? = $ac_status" >&5
    if (exit $ac_status) && test -s out/conftest2.$ac_objext
    then
      # The compiler can only warn and ignore the option if not recognized
@@ -9013,7 +9014,7 @@
   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2
   lt_status=$lt_dlunknown
   cat > conftest.$ac_ext <<EOF
-#line 9016 "configure"
+#line 9017 "configure"
 #include "confdefs.h"
 
 #if HAVE_DLFCN_H
@@ -9113,7 +9114,7 @@
   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2
   lt_status=$lt_dlunknown
   cat > conftest.$ac_ext <<EOF
-#line 9116 "configure"
+#line 9117 "configure"
 #include "confdefs.h"
 
 #if HAVE_DLFCN_H
@@ -11457,11 +11458,11 @@
    -e 's:.*FLAGS}\{0,1\} :&$lt_compiler_flag :; t' \
    -e 's: [^ ]*conftest\.: $lt_compiler_flag&:; t' \
    -e 's:$: $lt_compiler_flag:'`
-   (eval echo "\"\$as_me:11460: $lt_compile\"" >&5)
+   (eval echo "\"\$as_me:11461: $lt_compile\"" >&5)
    (eval "$lt_compile" 2>conftest.err)
    ac_status=$?
    cat conftest.err >&5
-   echo "$as_me:11464: \$? = $ac_status" >&5
+   echo "$as_me:11465: \$? = $ac_status" >&5
    if (exit $ac_status) && test -s "$ac_outfile"; then
      # The compiler can only warn and ignore the option if not recognized
      # So say no if there are warnings other than the usual output.
@@ -11561,11 +11562,11 @@
    -e 's:.*FLAGS}\{0,1\} :&$lt_compiler_flag :; t' \
    -e 's: [^ ]*conftest\.: $lt_compiler_flag&:; t' \
    -e 's:$: $lt_compiler_flag:'`
-   (eval echo "\"\$as_me:11564: $lt_compile\"" >&5)
+   (eval echo "\"\$as_me:11565: $lt_compile\"" >&5)
    (eval "$lt_compile" 2>out/conftest.err)
    ac_status=$?
    cat out/conftest.err >&5
-   echo "$as_me:11568: \$? = $ac_status" >&5
+   echo "$as_me:11569: \$? = $ac_status" >&5
    if (exit $ac_status) && test -s out/conftest2.$ac_objext
    then
      # The compiler can only warn and ignore the option if not recognized
@@ -13133,11 +13134,11 @@
    -e 's:.*FLAGS}\{0,1\} :&$lt_compiler_flag :; t' \
    -e 's: [^ ]*conftest\.: $lt_compiler_flag&:; t' \
    -e 's:$: $lt_compiler_flag:'`
-   (eval echo "\"\$as_me:13136: $lt_compile\"" >&5)
+   (eval echo "\"\$as_me:13137: $lt_compile\"" >&5)
    (eval "$lt_compile" 2>conftest.err)
    ac_status=$?
    cat conftest.err >&5
-   echo "$as_me:13140: \$? = $ac_status" >&5
+   echo "$as_me:13141: \$? = $ac_status" >&5
    if (exit $ac_status) && test -s "$ac_outfile"; then
      # The compiler can only warn and ignore the option if not recognized
      # So say no if there are warnings other than the usual output.
@@ -13237,11 +13238,11 @@
    -e 's:.*FLAGS}\{0,1\} :&$lt_compiler_flag :; t' \
    -e 's: [^ ]*conftest\.: $lt_compiler_flag&:; t' \
    -e 's:$: $lt_compiler_flag:'`
-   (eval echo "\"\$as_me:13240: $lt_compile\"" >&5)
+   (eval echo "\"\$as_me:13241: $lt_compile\"" >&5)
    (eval "$lt_compile" 2>out/conftest.err)
    ac_status=$?
    cat out/conftest.err >&5
-   echo "$as_me:13244: \$? = $ac_status" >&5
+   echo "$as_me:13245: \$? = $ac_status" >&5
    if (exit $ac_status) && test -s out/conftest2.$ac_objext
    then
      # The compiler can only warn and ignore the option if not recognized
@@ -15446,11 +15447,11 @@
    -e 's:.*FLAGS}\{0,1\} :&$lt_compiler_flag :; t' \
    -e 's: [^ ]*conftest\.: $lt_compiler_flag&:; t' \
    -e 's:$: $lt_compiler_flag:'`
-   (eval echo "\"\$as_me:15449: $lt_compile\"" >&5)
+   (eval echo "\"\$as_me:15450: $lt_compile\"" >&5)
    (eval "$lt_compile" 2>conftest.err)
    ac_status=$?
    cat conftest.err >&5
-   echo "$as_me:15453: \$? = $ac_status" >&5
+   echo "$as_me:15454: \$? = $ac_status" >&5
    if (exit $ac_status) && test -s "$ac_outfile"; then
      # The compiler can only warn and ignore the option if not recognized
      # So say no if there are warnings other than the usual output.
@@ -15714,11 +15715,11 @@
    -e 's:.*FLAGS}\{0,1\} :&$lt_compiler_flag :; t' \
    -e 's: [^ ]*conftest\.: $lt_compiler_flag&:; t' \
    -e 's:$: $lt_compiler_flag:'`
-   (eval echo "\"\$as_me:15717: $lt_compile\"" >&5)
+   (eval echo "\"\$as_me:15718: $lt_compile\"" >&5)
    (eval "$lt_compile" 2>conftest.err)
    ac_status=$?
    cat conftest.err >&5
-   echo "$as_me:15721: \$? = $ac_status" >&5
+   echo "$as_me:15722: \$? = $ac_status" >&5
    if (exit $ac_status) && test -s "$ac_outfile"; then
      # The compiler can only warn and ignore the option if not recognized
      # So say no if there are warnings other than the usual output.
@@ -15818,11 +15819,11 @@
    -e 's:.*FLAGS}\{0,1\} :&$lt_compiler_flag :; t' \
    -e 's: [^ ]*conftest\.: $lt_compiler_flag&:; t' \
    -e 's:$: $lt_compiler_flag:'`
-   (eval echo "\"\$as_me:15821: $lt_compile\"" >&5)
+   (eval echo "\"\$as_me:15822: $lt_compile\"" >&5)
    (eval "$lt_compile" 2>out/conftest.err)
    ac_status=$?
    cat out/conftest.err >&5
-   echo "$as_me:15825: \$? = $ac_status" >&5
+   echo "$as_me:15826: \$? = $ac_status" >&5
    if (exit $ac_status) && test -s out/conftest2.$ac_objext
    then
      # The compiler can only warn and ignore the option if not recognized
@@ -28203,6 +28204,82 @@
     fi
 }
 
+CheckXYNTH()
+{
+    # Check whether --enable-video-xynth or --disable-video-xynth was given.
+if test "${enable_video_xynth+set}" = set; then
+  enableval="$enable_video_xynth"
+
+else
+  enable_video_xynth=yes
+fi;
+    if test x$enable_video = xyes -a x$enable_video_xynth = xyes; then
+        echo "$as_me:$LINENO: checking for Xynth support" >&5
+echo $ECHO_N "checking for Xynth support... $ECHO_C" >&6
+        video_xynth=no
+        cat >conftest.$ac_ext <<_ACEOF
+/* confdefs.h.  */
+_ACEOF
+cat confdefs.h >>conftest.$ac_ext
+cat >>conftest.$ac_ext <<_ACEOF
+/* end confdefs.h.  */
+
+         #include <xynth.h>
+
+int
+main ()
+{
+
+
+  ;
+  return 0;
+}
+_ACEOF
+rm -f conftest.$ac_objext
+if { (eval echo "$as_me:$LINENO: \"$ac_compile\"") >&5
+  (eval $ac_compile) 2>conftest.er1
+  ac_status=$?
+  grep -v '^ *+' conftest.er1 >conftest.err
+  rm -f conftest.er1
+  cat conftest.err >&5
+  echo "$as_me:$LINENO: \$? = $ac_status" >&5
+  (exit $ac_status); } &&
+	 { ac_try='test -z "$ac_c_werror_flag"
+			 || test ! -s conftest.err'
+  { (eval echo "$as_me:$LINENO: \"$ac_try\"") >&5
+  (eval $ac_try) 2>&5
+  ac_status=$?
+  echo "$as_me:$LINENO: \$? = $ac_status" >&5
+  (exit $ac_status); }; } &&
+	 { ac_try='test -s conftest.$ac_objext'
+  { (eval echo "$as_me:$LINENO: \"$ac_try\"") >&5
+  (eval $ac_try) 2>&5
+  ac_status=$?
+  echo "$as_me:$LINENO: \$? = $ac_status" >&5
+  (exit $ac_status); }; }; then
+
+        video_xynth=yes
+
+else
+  echo "$as_me: failed program was:" >&5
+sed 's/^/| /' conftest.$ac_ext >&5
+
+fi
+rm -f conftest.err conftest.$ac_objext conftest.$ac_ext
+        echo "$as_me:$LINENO: result: $video_xynth" >&5
+echo "${ECHO_T}$video_xynth" >&6
+        if test x$video_xynth = xyes; then
+            cat >>confdefs.h <<\_ACEOF
+#define SDL_VIDEO_DRIVER_XYNTH 1
+_ACEOF
+
+            SOURCES="$SOURCES $srcdir/src/video/xynth/*.c"
+            EXTRA_LDFLAGS="$EXTRA_LDFLAGS -lxynth"
+            have_video=yes
+        fi
+    fi
+}
+
 CheckVGL()
 {
     # Check whether --enable-video-vgl or --disable-video-vgl was given.
@@ -32423,6 +32500,7 @@
         CheckPS2GS
         CheckGGI
         CheckSVGA
+	CheckXYNTH
         CheckVGL
         CheckWscons
         CheckAAlib
diff -Naur SDL-1.2.10/configure.in SDL-1.2.10-xynth/configure.in
--- SDL-1.2.10/configure.in	2006-05-17 06:16:07.000000000 +0300
+++ SDL-1.2.10-xynth/configure.in	2006-05-20 05:05:57.000000000 +0300
@@ -1219,6 +1219,31 @@
     fi
 }
 
+dnl Find the Xynth includes and libraries
+CheckXYNTH()
+{
+    AC_ARG_ENABLE(video-xynth,
+[  --enable-video-xynth    use The Xynth Windowing System [default=yes]],
+                  , enable_video_xynth=yes)
+    if test x$enable_video = xyes -a x$enable_video_xynth = xyes; then
+        AC_MSG_CHECKING(for Xynth support)
+        video_xynth=no
+        AC_TRY_COMPILE([
+         #include <xynth.h>
+        ],[
+        ],[
+        video_xynth=yes
+        ])
+        AC_MSG_RESULT($video_xynth)
+        if test x$video_xynth = xyes; then
+            AC_DEFINE(SDL_VIDEO_DRIVER_XYNTH)
+            SOURCES="$SOURCES $srcdir/src/video/xynth/*.c"
+            EXTRA_LDFLAGS="$EXTRA_LDFLAGS -lxynth"
+            have_video=yes
+        fi
+    fi
+}
+
 dnl Find the VGL includes and libraries
 CheckVGL()
 {
@@ -2115,6 +2140,7 @@
         CheckPS2GS
         CheckGGI
         CheckSVGA
+	CheckXYNTH
         CheckVGL
         CheckWscons
         CheckAAlib
diff -Naur SDL-1.2.10/include/SDL_config.h.in SDL-1.2.10-xynth/include/SDL_config.h.in
--- SDL-1.2.10/include/SDL_config.h.in	2006-05-08 09:11:26.000000000 +0300
+++ SDL-1.2.10-xynth/include/SDL_config.h.in	2006-05-20 05:05:57.000000000 +0300
@@ -272,6 +272,7 @@
 #undef SDL_VIDEO_DRIVER_QUARTZ
 #undef SDL_VIDEO_DRIVER_RISCOS
 #undef SDL_VIDEO_DRIVER_SVGALIB
+#undef SDL_VIDEO_DRIVER_XYNTH
 #undef SDL_VIDEO_DRIVER_TOOLBOX
 #undef SDL_VIDEO_DRIVER_VGL
 #undef SDL_VIDEO_DRIVER_WINDIB
diff -Naur SDL-1.2.10/src/video/SDL_sysvideo.h SDL-1.2.10-xynth/src/video/SDL_sysvideo.h
--- SDL-1.2.10/src/video/SDL_sysvideo.h	2006-05-01 11:02:48.000000000 +0300
+++ SDL-1.2.10-xynth/src/video/SDL_sysvideo.h	2006-05-20 05:05:57.000000000 +0300
@@ -356,6 +356,9 @@
 #if SDL_VIDEO_DRIVER_SVGALIB
 extern VideoBootStrap SVGALIB_bootstrap;
 #endif
+#if SDL_VIDEO_DRIVER_XYNTH
+extern VideoBootStrap XYNTH_bootstrap;
+#endif
 #if SDL_VIDEO_DRIVER_GAPI
 extern VideoBootStrap GAPI_bootstrap;
 #endif
diff -Naur SDL-1.2.10/src/video/SDL_video.c SDL-1.2.10-xynth/src/video/SDL_video.c
--- SDL-1.2.10/src/video/SDL_video.c	2006-05-01 11:02:48.000000000 +0300
+++ SDL-1.2.10-xynth/src/video/SDL_video.c	2006-05-20 05:05:57.000000000 +0300
@@ -72,6 +72,9 @@
 #if SDL_VIDEO_DRIVER_SVGALIB
 	&SVGALIB_bootstrap,
 #endif
+#if SDL_VIDEO_DRIVER_XYNTH
+	&XYNTH_bootstrap,
+#endif
 #if SDL_VIDEO_DRIVER_GAPI
 	&GAPI_bootstrap,
 #endif
diff -Naur SDL-1.2.10/src/video/xynth/SDL_xynth.h SDL-1.2.10-xynth/src/video/xynth/SDL_xynth.h
--- SDL-1.2.10/src/video/xynth/SDL_xynth.h	1970-01-01 02:00:00.000000000 +0200
+++ SDL-1.2.10-xynth/src/video/xynth/SDL_xynth.h	2006-05-20 04:47:18.000000000 +0300
@@ -0,0 +1,110 @@
+/***************************************************************************
+    begin                : Thu Jan 22 2004
+    copyright            : (C) 2004 - 2006 by Alper Akcan
+    email                : distchx@yahoo.com
+ ***************************************************************************/
+
+/***************************************************************************
+ *                                                                         *
+ *   This program is free software; you can redistribute it and/or modify  *
+ *   it under the terms of the GNU Lesser General Public License as        *
+ *   published by the Free Software Foundation; either version 2.1 of the  *
+ *   License, or (at your option) any later version.                       *
+ *                                                                         *
+ ***************************************************************************/
+
+#ifndef SDL_xynth_h
+#define SDL_xynth_h
+
+#include <stdio.h>
+#include <stdlib.h>
+#include <unistd.h>
+#include <xynth.h>
+
+#include "SDL.h"
+#include "SDL_error.h"
+#include "SDL_mouse.h"
+#include "SDL_mutex.h"
+#include "../SDL_sysvideo.h"
+#include "../../events/SDL_sysevents.h"
+#include "../../events/SDL_events_c.h"
+
+#define _THIS	SDL_VideoDevice *this
+
+int sdl_xynth_running;
+int sdl_xynth_running_;
+
+struct WMcursor {
+	int unused;
+};
+
+struct SDL_PrivateVideoData {
+    int w;
+    int h;
+    int bpp;
+    void *buffer;
+    s_thread_t *tid;
+    s_window_t *window;
+};
+
+/* cursor.c */
+void sdl_xynth_FreeWMCursor (_THIS, WMcursor *cursor);
+WMcursor * sdl_xynth_CreateWMCursor (_THIS, Uint8 *data, Uint8 *mask, int w, int h, int hot_x, int hot_y);
+int sdl_xynth_ShowWMCursor (_THIS, WMcursor *cursor);
+void sdl_xynth_WarpWMCursor (_THIS, Uint16 x, Uint16 y);
+void sdl_xynth_MoveWMCursor (_THIS, int x, int y);
+void sdl_xynth_CheckMouseMode (_THIS);
+
+/* event.c */
+void sdl_xynth_atexit (s_window_t *window);
+void sdl_xynth_atevent (s_window_t *window, s_event_t *event);
+void sdl_xynth_InitOSKeymap (_THIS);
+void sdl_xynth_PumpEvents (_THIS);
+SDL_keysym * sdl_xynth_translatekey(s_event_t *event, SDL_keysym *keysym);
+
+/* gamma.c */
+int sdl_xynth_SetGamma (_THIS, float red, float green, float blue);
+int sdl_xynth_GetGamma (_THIS, float *red, float *green, float *blue);
+int sdl_xynth_SetGammaRamp (_THIS, Uint16 *ramp);
+int sdl_xynth_GetGammaRamp (_THIS, Uint16 *ramp);
+
+/* gl.c */
+int sdl_xynth_GL_LoadLibrary (_THIS, const char *path);
+void* sdl_xynth_GL_GetProcAddress (_THIS, const char *proc);
+int sdl_xynth_GL_GetAttribute (_THIS, SDL_GLattr attrib, int* value);
+int sdl_xynth_GL_MakeCurrent (_THIS);
+void sdl_xynth_GL_SwapBuffers (_THIS);
+
+/* hw.c */
+int sdl_xynth_AllocHWSurface (_THIS, SDL_Surface *surface);
+int sdl_xynth_CheckHWBlit (_THIS, SDL_Surface *src, SDL_Surface *dst);
+int sdl_xynth_FillHWRect (_THIS, SDL_Surface *dst, SDL_Rect *rect, Uint32 color);
+int sdl_xynth_SetHWColorKey (_THIS, SDL_Surface *surface, Uint32 key);
+int sdl_xynth_SetHWAlpha (_THIS, SDL_Surface *surface, Uint8 value);
+int sdl_xynth_LockHWSurface (_THIS, SDL_Surface *surface);
+void sdl_xynth_UnlockHWSurface (_THIS, SDL_Surface *surface);
+int sdl_xynth_FlipHWSurface (_THIS, SDL_Surface *surface);
+void sdl_xynth_FreeHWSurface (_THIS, SDL_Surface *surface);
+
+/* video.c */
+int sdl_xynth_Available(void);
+void sdl_xynth_DeleteDevice(SDL_VideoDevice *device);
+SDL_VideoDevice *sdl_xynth_CreateDevice(int devindex);
+int sdl_xynth_VideoInit (_THIS, SDL_PixelFormat *vformat);
+SDL_Rect ** sdl_xynth_ListModes (_THIS, SDL_PixelFormat *format, Uint32 flags);
+SDL_Surface * sdl_xynth_SetVideoMode (_THIS, SDL_Surface *current, int width, int height, int bpp, Uint32 flags);
+int sdl_xynth_ToggleFullScreen (_THIS, int on);
+void sdl_xynth_UpdateMouse (_THIS);
+SDL_Overlay * sdl_xynth_CreateYUVOverlay (_THIS, int width, int height, Uint32 format, SDL_Surface *display);
+int sdl_xynth_SetColors (_THIS, int firstcolor, int ncolors, SDL_Color *colors);
+void sdl_xynth_UpdateRects (_THIS, int numrects, SDL_Rect *rects);
+void sdl_xynth_VideoQuit (_THIS);
+
+/* wm.c */
+void sdl_xynth_SetCaption (_THIS, const char *title, const char *icon);
+void sdl_xynth_SetIcon (_THIS, SDL_Surface *icon, Uint8 *mask);
+int sdl_xynth_IconifyWindow (_THIS);
+SDL_GrabMode sdl_xynth_GrabInput (_THIS, SDL_GrabMode mode);
+int sdl_xynth_GetWMInfo (_THIS, SDL_SysWMinfo *info);
+
+#endif /* SDL_xynth_h */
diff -Naur SDL-1.2.10/src/video/xynth/SDL_xynthcursor.c SDL-1.2.10-xynth/src/video/xynth/SDL_xynthcursor.c
--- SDL-1.2.10/src/video/xynth/SDL_xynthcursor.c	1970-01-01 02:00:00.000000000 +0200
+++ SDL-1.2.10-xynth/src/video/xynth/SDL_xynthcursor.c	2006-05-20 04:37:55.000000000 +0300
@@ -0,0 +1,72 @@
+/***************************************************************************
+    begin                : Thu Jan 22 2004
+    copyright            : (C) 2004 - 2006 by Alper Akcan
+    email                : distchx@yahoo.com
+ ***************************************************************************/
+
+/***************************************************************************
+ *                                                                         *
+ *   This program is free software; you can redistribute it and/or modify  *
+ *   it under the terms of the GNU Lesser General Public License as        *
+ *   published by the Free Software Foundation; either version 2.1 of the  *
+ *   License, or (at your option) any later version.                       *
+ *                                                                         *
+ ***************************************************************************/
+
+#include "SDL_xynth.h"
+
+#if 0
+	#define debugf(a) printf(a);
+#else
+	#define debugf(a)
+#endif
+
+/* Free a window manager cursor
+   This function can be NULL if CreateWMCursor is also NULL.
+ */
+void sdl_xynth_FreeWMCursor (_THIS, WMcursor *cursor)
+{
+	s_free(cursor);
+	debugf("sdl_xynth_FreeWMCursor\n");
+}
+
+/* If not NULL, create a black/white window manager cursor */
+WMcursor * sdl_xynth_CreateWMCursor (_THIS, Uint8 *data, Uint8 *mask, int w, int h, int hot_x, int hot_y)
+{
+	WMcursor *cursor = (WMcursor *) s_malloc(sizeof(WMcursor));
+	debugf("sdl_xynth_CreateWMCursor\n");
+	return cursor;
+}
+
+/* Show the specified cursor, or hide if cursor is NULL */
+int sdl_xynth_ShowWMCursor (_THIS, WMcursor *cursor)
+{
+	debugf("sdl_xynth_ShowWMCursor\n");
+	return 1;
+}
+
+/* Warp the window manager cursor to (x,y)
+   If NULL, a mouse motion event is posted internally.
+ */
+void sdl_xynth_WarpWMCursor (_THIS, Uint16 x, Uint16 y)
+{
+	debugf("sdl_xynth_WarpWMCursor\n");
+}
+
+/* If not NULL, this is called when a mouse motion event occurs */
+void sdl_xynth_MoveWMCursor (_THIS, int x, int y)
+{
+	debugf("sdl_xynth_MoveWMCursor\n");
+}
+
+/* Determine whether the mouse should be in relative mode or not.
+   This function is called when the input grab state or cursor
+   visibility state changes.
+   If the cursor is not visible, and the input is grabbed, the
+   driver can place the mouse in relative mode, which may result
+   in higher accuracy sampling of the pointer motion.
+*/
+void sdl_xynth_CheckMouseMode (_THIS)
+{
+	debugf("sdl_xynth_CheckMouseMode\n");
+}
diff -Naur SDL-1.2.10/src/video/xynth/SDL_xynthevent.c SDL-1.2.10-xynth/src/video/xynth/SDL_xynthevent.c
--- SDL-1.2.10/src/video/xynth/SDL_xynthevent.c	1970-01-01 02:00:00.000000000 +0200
+++ SDL-1.2.10-xynth/src/video/xynth/SDL_xynthevent.c	2006-05-20 04:37:55.000000000 +0300
@@ -0,0 +1,203 @@
+/***************************************************************************
+    begin                : Thu Jan 22 2004
+    copyright            : (C) 2004 - 2006 by Alper Akcan
+    email                : distchx@yahoo.com
+ ***************************************************************************/
+
+/***************************************************************************
+ *                                                                         *
+ *   This program is free software; you can redistribute it and/or modify  *
+ *   it under the terms of the GNU Lesser General Public License as        *
+ *   published by the Free Software Foundation; either version 2.1 of the  *
+ *   License, or (at your option) any later version.                       *
+ *                                                                         *
+ ***************************************************************************/
+
+#include "SDL_xynth.h"
+
+static SDLKey sdl_xynth_keymap[128];
+
+void sdl_xynth_atexit (s_window_t *window)
+{
+	if (sdl_xynth_running) {
+		while (sdl_xynth_running_) {
+			usleep(20000);
+		}
+		sdl_xynth_running = 0;
+		SDL_PrivateQuit();
+	}
+}
+
+void sdl_xynth_atevent (s_window_t *window, s_event_t *event)
+{
+        int state = 0;
+        int button = 0;
+        
+	if ((event->type & MOUSE_EVENT) &&
+	    ((event->mouse->x >= window->surface->buf->x) &&
+	     (event->mouse->x <= window->surface->buf->x + window->surface->buf->w) &&
+	     (event->mouse->y >= window->surface->buf->y) &&
+	     (event->mouse->y <= window->surface->buf->y + window->surface->buf->h))) {
+		if (event->type & MOUSE_OVER) {
+			if (event->type & MOUSE_HINT) {
+				state = SDL_PRESSED;
+			}
+			SDL_PrivateMouseMotion(state, 0, event->mouse->x - window->surface->buf->x, event->mouse->y - window->surface->buf->y);
+		} else if (event->type & (MOUSE_PRESSED | MOUSE_RELEASED | MOUSE_CLICKED)) {
+			if (event->type & (MOUSE_PRESSED)) {
+				state = SDL_PRESSED;
+			}
+			if (event->type & (MOUSE_RELEASED | MOUSE_CLICKED)) {
+				state = SDL_RELEASED;
+			}
+			switch (event->mouse->b) {
+				case MOUSE_RIGHTBUTTON:		button = SDL_BUTTON_RIGHT;	break;
+				case MOUSE_MIDDLEBUTTON:	button = SDL_BUTTON_MIDDLE;	break;
+				case MOUSE_LEFTBUTTON:		button = SDL_BUTTON_LEFT;	break;
+				default:			button = 0;			break;
+			}
+			SDL_PrivateMouseButton(state, button, event->mouse->x - window->surface->buf->x, event->mouse->y - window->surface->buf->y);
+		}
+	}
+	if (event->type & KEYBD_EVENT) {
+		SDL_keysym keysym;
+		if (event->type & KEYBD_PRESSED) {
+			state = SDL_PRESSED;
+		} else if (event->type & KEYBD_RELEASED) {
+			state = SDL_RELEASED;
+		}
+		SDL_PrivateKeyboard(state, sdl_xynth_translatekey(event, &keysym));
+	}
+}
+
+/* Handle any queued OS events */
+void sdl_xynth_PumpEvents(_THIS)
+{
+}
+
+/* Initialize keyboard mapping for this driver */
+void sdl_xynth_InitOSKeymap (_THIS)
+{
+	int i;
+	
+	for (i = 0; i < SDL_TABLESIZE(sdl_xynth_keymap); i++) {
+		sdl_xynth_keymap[i] = SDLK_UNKNOWN;
+	}
+	
+	sdl_xynth_keymap[S_KEYCODE_ESCAPE] = SDLK_ESCAPE;
+	sdl_xynth_keymap[S_KEYCODE_ONE] = SDLK_1;
+	sdl_xynth_keymap[S_KEYCODE_TWO] = SDLK_2;
+	sdl_xynth_keymap[S_KEYCODE_THREE] = SDLK_3;
+	sdl_xynth_keymap[S_KEYCODE_FOUR] = SDLK_4;
+	sdl_xynth_keymap[S_KEYCODE_FIVE] = SDLK_5;
+	sdl_xynth_keymap[S_KEYCODE_SIX] = SDLK_6;
+	sdl_xynth_keymap[S_KEYCODE_SEVEN] = SDLK_7;
+	sdl_xynth_keymap[S_KEYCODE_EIGHT] = SDLK_8;
+	sdl_xynth_keymap[S_KEYCODE_NINE] = SDLK_9;
+	sdl_xynth_keymap[S_KEYCODE_ZERO] = SDLK_0;
+	sdl_xynth_keymap[S_KEYCODE_MINUS] = SDLK_MINUS;
+	sdl_xynth_keymap[S_KEYCODE_EQUAL] = SDLK_EQUALS;
+	sdl_xynth_keymap[S_KEYCODE_DELETE] = SDLK_BACKSPACE;
+	sdl_xynth_keymap[S_KEYCODE_TAB] = SDLK_TAB;
+	sdl_xynth_keymap[S_KEYCODE_q] = SDLK_q;
+	sdl_xynth_keymap[S_KEYCODE_w] = SDLK_w;
+	sdl_xynth_keymap[S_KEYCODE_e] = SDLK_e;
+	sdl_xynth_keymap[S_KEYCODE_r] = SDLK_r;
+	sdl_xynth_keymap[S_KEYCODE_t] = SDLK_t;
+	sdl_xynth_keymap[S_KEYCODE_y] = SDLK_y;
+	sdl_xynth_keymap[S_KEYCODE_u] = SDLK_u;
+	sdl_xynth_keymap[S_KEYCODE_i] = SDLK_i;
+	sdl_xynth_keymap[S_KEYCODE_o] = SDLK_o;
+	sdl_xynth_keymap[S_KEYCODE_p] = SDLK_p;
+	sdl_xynth_keymap[S_KEYCODE_BRACKETLEFT] = SDLK_LEFTBRACKET;
+	sdl_xynth_keymap[S_KEYCODE_BRACKETRIGHT] = SDLK_RIGHTBRACKET;
+	sdl_xynth_keymap[S_KEYCODE_RETURN] = SDLK_RETURN;
+	sdl_xynth_keymap[S_KEYCODE_LEFTCONTROL] = SDLK_LCTRL;
+	sdl_xynth_keymap[S_KEYCODE_a] = SDLK_a;
+	sdl_xynth_keymap[S_KEYCODE_s] = SDLK_s;
+	sdl_xynth_keymap[S_KEYCODE_d] = SDLK_d;
+	sdl_xynth_keymap[S_KEYCODE_f] = SDLK_f;
+	sdl_xynth_keymap[S_KEYCODE_g] = SDLK_g;
+	sdl_xynth_keymap[S_KEYCODE_h] = SDLK_h;
+	sdl_xynth_keymap[S_KEYCODE_j] = SDLK_j;
+	sdl_xynth_keymap[S_KEYCODE_k] = SDLK_k;
+	sdl_xynth_keymap[S_KEYCODE_l] = SDLK_l;
+	sdl_xynth_keymap[S_KEYCODE_SEMICOLON] = SDLK_SEMICOLON;
+	sdl_xynth_keymap[S_KEYCODE_APOSTROPHE] = SDLK_QUOTE;
+	sdl_xynth_keymap[S_KEYCODE_GRAVE] = SDLK_BACKQUOTE;
+	sdl_xynth_keymap[S_KEYCODE_LEFTSHIFT] = SDLK_LSHIFT;
+	sdl_xynth_keymap[S_KEYCODE_BACKSLASH] = SDLK_BACKSLASH;
+	sdl_xynth_keymap[S_KEYCODE_z] = SDLK_z;
+	sdl_xynth_keymap[S_KEYCODE_x] = SDLK_x;
+	sdl_xynth_keymap[S_KEYCODE_c] = SDLK_c;
+	sdl_xynth_keymap[S_KEYCODE_v] = SDLK_v;
+	sdl_xynth_keymap[S_KEYCODE_b] = SDLK_b;
+	sdl_xynth_keymap[S_KEYCODE_n] = SDLK_n;
+	sdl_xynth_keymap[S_KEYCODE_m] = SDLK_m;
+	sdl_xynth_keymap[S_KEYCODE_COMMA] = SDLK_COMMA;
+	sdl_xynth_keymap[S_KEYCODE_PERIOD] = SDLK_PERIOD;
+	sdl_xynth_keymap[S_KEYCODE_SLASH] = SDLK_SLASH;
+	sdl_xynth_keymap[S_KEYCODE_RIGHTSHIFT] = SDLK_RSHIFT;
+	sdl_xynth_keymap[S_KEYCODE_KP_MULTIPLY] = SDLK_KP_MULTIPLY;
+	sdl_xynth_keymap[S_KEYCODE_ALT] = SDLK_LALT;
+	sdl_xynth_keymap[S_KEYCODE_SPACE] = SDLK_SPACE;
+	sdl_xynth_keymap[S_KEYCODE_CAPS_LOCK] = SDLK_CAPSLOCK;
+	sdl_xynth_keymap[S_KEYCODE_F1] = SDLK_F1;
+	sdl_xynth_keymap[S_KEYCODE_F2] = SDLK_F2;
+	sdl_xynth_keymap[S_KEYCODE_F3] = SDLK_F3;
+	sdl_xynth_keymap[S_KEYCODE_F4] = SDLK_F4;
+	sdl_xynth_keymap[S_KEYCODE_F5] = SDLK_F5;
+	sdl_xynth_keymap[S_KEYCODE_F6] = SDLK_F6;
+	sdl_xynth_keymap[S_KEYCODE_F7] = SDLK_F7;
+	sdl_xynth_keymap[S_KEYCODE_F8] = SDLK_F8;
+	sdl_xynth_keymap[S_KEYCODE_F9] = SDLK_F9;
+	sdl_xynth_keymap[S_KEYCODE_F10] = SDLK_F10;
+	sdl_xynth_keymap[S_KEYCODE_NUM_LOCK] = SDLK_NUMLOCK;
+	sdl_xynth_keymap[S_KEYCODE_SCROLL_LOCK] = SDLK_SCROLLOCK;
+	sdl_xynth_keymap[S_KEYCODE_KP_7] = SDLK_KP7;
+	sdl_xynth_keymap[S_KEYCODE_KP_8] = SDLK_KP8;
+	sdl_xynth_keymap[S_KEYCODE_KP_9] = SDLK_KP9;
+	sdl_xynth_keymap[S_KEYCODE_KP_SUBTRACT] = SDLK_KP_MINUS;
+	sdl_xynth_keymap[S_KEYCODE_KP_4] = SDLK_KP4;
+	sdl_xynth_keymap[S_KEYCODE_KP_5] = SDLK_KP5;
+	sdl_xynth_keymap[S_KEYCODE_KP_6] = SDLK_KP6;
+	sdl_xynth_keymap[S_KEYCODE_KP_ADD] = SDLK_KP_PLUS;
+	sdl_xynth_keymap[S_KEYCODE_KP_1] = SDLK_KP1;
+	sdl_xynth_keymap[S_KEYCODE_KP_2] = SDLK_KP2;
+	sdl_xynth_keymap[S_KEYCODE_KP_3] = SDLK_KP3;
+	sdl_xynth_keymap[S_KEYCODE_KP_0] = SDLK_KP0;
+	sdl_xynth_keymap[S_KEYCODE_KP_PERIOD] = SDLK_KP_PERIOD;
+	sdl_xynth_keymap[S_KEYCODE_LESS] = SDLK_LESS;
+	sdl_xynth_keymap[S_KEYCODE_F11] = SDLK_F11;
+	sdl_xynth_keymap[S_KEYCODE_F12] = SDLK_F12;
+	sdl_xynth_keymap[S_KEYCODE_KP_ENTER] = SDLK_KP_ENTER;
+	sdl_xynth_keymap[S_KEYCODE_RIGHTCONTROL] = SDLK_RCTRL;
+	sdl_xynth_keymap[S_KEYCODE_KP_DIVIDE] = SDLK_KP_DIVIDE;
+	sdl_xynth_keymap[S_KEYCODE_VOIDSYMBOL] = SDLK_PRINT;
+	sdl_xynth_keymap[S_KEYCODE_ALTGR] = SDLK_RALT;
+	sdl_xynth_keymap[S_KEYCODE_BREAK] = SDLK_BREAK;
+	sdl_xynth_keymap[S_KEYCODE_HOME] = SDLK_HOME;
+	sdl_xynth_keymap[S_KEYCODE_UP] = SDLK_UP;
+	sdl_xynth_keymap[S_KEYCODE_PAGEUP] = SDLK_PAGEUP;
+	sdl_xynth_keymap[S_KEYCODE_LEFT] = SDLK_LEFT;
+	sdl_xynth_keymap[S_KEYCODE_RIGHT] = SDLK_RIGHT;
+	sdl_xynth_keymap[S_KEYCODE_END] = SDLK_END;
+	sdl_xynth_keymap[S_KEYCODE_DOWN] = SDLK_DOWN;
+	sdl_xynth_keymap[S_KEYCODE_PAGEDOWN] = SDLK_PAGEDOWN;
+	sdl_xynth_keymap[S_KEYCODE_INSERT] = SDLK_INSERT;
+	sdl_xynth_keymap[S_KEYCODE_REMOVE] = SDLK_DELETE;
+	sdl_xynth_keymap[S_KEYCODE_PAUSE] = SDLK_PAUSE;
+}
+
+SDL_keysym * sdl_xynth_translatekey(s_event_t *event, SDL_keysym *keysym)
+{
+	keysym->scancode = event->keybd->scancode;
+	keysym->sym = (event->keybd->keycode == S_KEYCODE_NOCODE) ? SDLK_UNKNOWN : sdl_xynth_keymap[event->keybd->keycode];
+	keysym->mod = KMOD_NONE;
+	keysym->unicode = event->keybd->ascii;
+	
+	if (SDL_TranslateUNICODE) {
+	}
+	
+	return keysym;
+}
diff -Naur SDL-1.2.10/src/video/xynth/SDL_xynthgamma.c SDL-1.2.10-xynth/src/video/xynth/SDL_xynthgamma.c
--- SDL-1.2.10/src/video/xynth/SDL_xynthgamma.c	1970-01-01 02:00:00.000000000 +0200
+++ SDL-1.2.10-xynth/src/video/xynth/SDL_xynthgamma.c	2006-05-20 04:37:55.000000000 +0300
@@ -0,0 +1,40 @@
+/***************************************************************************
+    begin                : Thu Jan 22 2004
+    copyright            : (C) 2004 - 2006 by Alper Akcan
+    email                : distchx@yahoo.com
+ ***************************************************************************/
+
+/***************************************************************************
+ *                                                                         *
+ *   This program is free software; you can redistribute it and/or modify  *
+ *   it under the terms of the GNU Lesser General Public License as        *
+ *   published by the Free Software Foundation; either version 2.1 of the  *
+ *   License, or (at your option) any later version.                       *
+ *                                                                         *
+ ***************************************************************************/
+
+#include "SDL_xynth.h"
+
+/* Set the gamma correction directly (emulated with gamma ramps) */
+int sdl_xynth_SetGamma (_THIS, float red, float green, float blue)
+{
+	return 0;
+}
+
+/* Get the gamma correction directly (emulated with gamma ramps) */
+int sdl_xynth_GetGamma (_THIS, float *red, float *green, float *blue)
+{
+	return 0;
+}
+
+/* Set the gamma ramp */
+int sdl_xynth_SetGammaRamp (_THIS, Uint16 *ramp)
+{
+	return 0;
+}
+
+/* Get the gamma ramp */
+int sdl_xynth_GetGammaRamp (_THIS, Uint16 *ramp)
+{
+	return 0;
+}
diff -Naur SDL-1.2.10/src/video/xynth/SDL_xynthgl.c SDL-1.2.10-xynth/src/video/xynth/SDL_xynthgl.c
--- SDL-1.2.10/src/video/xynth/SDL_xynthgl.c	1970-01-01 02:00:00.000000000 +0200
+++ SDL-1.2.10-xynth/src/video/xynth/SDL_xynthgl.c	2006-05-20 04:37:55.000000000 +0300
@@ -0,0 +1,45 @@
+/***************************************************************************
+    begin                : Thu Jan 22 2004
+    copyright            : (C) 2004 - 2006 by Alper Akcan
+    email                : distchx@yahoo.com
+ ***************************************************************************/
+
+/***************************************************************************
+ *                                                                         *
+ *   This program is free software; you can redistribute it and/or modify  *
+ *   it under the terms of the GNU Lesser General Public License as        *
+ *   published by the Free Software Foundation; either version 2.1 of the  *
+ *   License, or (at your option) any later version.                       *
+ *                                                                         *
+ ***************************************************************************/
+
+#include "SDL_xynth.h"
+
+/* Sets the dll to use for OpenGL and loads it */
+int sdl_xynth_GL_LoadLibrary (_THIS, const char *path)
+{
+	return 0;
+}
+
+/* Retrieves the address of a function in the gl library */
+void * sdl_xynth_GL_GetProcAddress (_THIS, const char *proc)
+{
+	return NULL;
+}
+
+/* Get attribute information from the windowing system. */
+int sdl_xynth_GL_GetAttribute (_THIS, SDL_GLattr attrib, int *value)
+{
+	return 0;
+}
+
+/* Make the context associated with this driver current */
+int sdl_xynth_GL_MakeCurrent (_THIS)
+{
+	return 0;
+}
+
+/* Swap the current buffers in double buffer mode. */
+void sdl_xynth_GL_SwapBuffers (_THIS)
+{
+}
diff -Naur SDL-1.2.10/src/video/xynth/SDL_xynthhw.c SDL-1.2.10-xynth/src/video/xynth/SDL_xynthhw.c
--- SDL-1.2.10/src/video/xynth/SDL_xynthhw.c	1970-01-01 02:00:00.000000000 +0200
+++ SDL-1.2.10-xynth/src/video/xynth/SDL_xynthhw.c	2006-05-20 04:37:55.000000000 +0300
@@ -0,0 +1,69 @@
+/***************************************************************************
+    begin                : Thu Jan 22 2004
+    copyright            : (C) 2004 - 2006 by Alper Akcan
+    email                : distchx@yahoo.com
+ ***************************************************************************/
+
+/***************************************************************************
+ *                                                                         *
+ *   This program is free software; you can redistribute it and/or modify  *
+ *   it under the terms of the GNU Lesser General Public License as        *
+ *   published by the Free Software Foundation; either version 2.1 of the  *
+ *   License, or (at your option) any later version.                       *
+ *                                                                         *
+ ***************************************************************************/
+
+#include "SDL_xynth.h"
+
+/* Allocates a surface in video memory */
+int sdl_xynth_AllocHWSurface (_THIS, SDL_Surface *surface)
+{
+	return -1;
+}
+
+/* Sets the hardware accelerated blit function, if any, based
+   on the current flags of the surface (colorkey, alpha, etc.)
+ */
+int sdl_xynth_CheckHWBlit (_THIS, SDL_Surface *src, SDL_Surface *dst)
+{
+	return 0;
+}
+
+/* Fills a surface rectangle with the given color */
+int sdl_xynth_FillHWRect (_THIS, SDL_Surface *dst, SDL_Rect *rect, Uint32 color)
+{
+	return 0;
+}
+
+/* Sets video mem colorkey and accelerated blit function */
+int sdl_xynth_SetHWColorKey (_THIS, SDL_Surface *surface, Uint32 key)
+{
+	return 0;
+}
+
+/* Sets per surface hardware alpha value */
+int sdl_xynth_SetHWAlpha (_THIS, SDL_Surface *surface, Uint8 value)
+{
+	return 0;
+}
+
+/* Returns a readable/writable surface */
+int sdl_xynth_LockHWSurface (_THIS, SDL_Surface *surface)
+{
+	return 0;
+}
+
+void sdl_xynth_UnlockHWSurface (_THIS, SDL_Surface *surface)
+{
+}
+
+/* Performs hardware flipping */
+int sdl_xynth_FlipHWSurface (_THIS, SDL_Surface *surface)
+{
+	return 0;
+}
+
+/* Frees a previously allocated video surface */
+void sdl_xynth_FreeHWSurface (_THIS, SDL_Surface *surface)
+{
+}
diff -Naur SDL-1.2.10/src/video/xynth/SDL_xynthvideo.c SDL-1.2.10-xynth/src/video/xynth/SDL_xynthvideo.c
--- SDL-1.2.10/src/video/xynth/SDL_xynthvideo.c	1970-01-01 02:00:00.000000000 +0200
+++ SDL-1.2.10-xynth/src/video/xynth/SDL_xynthvideo.c	2006-05-20 04:47:57.000000000 +0300
@@ -0,0 +1,281 @@
+/***************************************************************************
+    begin                : Thu Jan 22 2004
+    copyright            : (C) 2004 - 2006 by Alper Akcan
+    email                : distchx@yahoo.com
+ ***************************************************************************/
+
+/***************************************************************************
+ *                                                                         *
+ *   This program is free software; you can redistribute it and/or modify  *
+ *   it under the terms of the GNU Lesser General Public License as        *
+ *   published by the Free Software Foundation; either version 2.1 of the  *
+ *   License, or (at your option) any later version.                       *
+ *                                                                         *
+ ***************************************************************************/
+
+#include <stdio.h>
+#include <stdlib.h>
+#include <string.h>
+
+#include "SDL_xynth.h"
+
+#define xynthVID_DRIVER_NAME "xynth"
+
+VideoBootStrap XYNTH_bootstrap = {
+	xynthVID_DRIVER_NAME, "SDL xynth video driver",
+	sdl_xynth_Available, sdl_xynth_CreateDevice
+};
+
+int sdl_xynth_Available(void)
+{
+	const char *envr = getenv("SDL_VIDEODRIVER");
+	if ((envr) && (strcmp(envr, xynthVID_DRIVER_NAME) == 0)) {
+		return(1);
+	}
+
+	return(0);
+}
+
+void sdl_xynth_DeleteDevice(SDL_VideoDevice *device)
+{
+	s_free(device->hidden);
+	s_free(device);
+}
+
+SDL_VideoDevice *sdl_xynth_CreateDevice(int devindex)
+{
+	SDL_VideoDevice *device;
+
+	/* Initialize all variables that we clean on shutdown */
+	device = (SDL_VideoDevice *) s_malloc(sizeof(SDL_VideoDevice));
+	if (device) {
+		memset(device, 0, (sizeof *device));
+		device->hidden = (struct SDL_PrivateVideoData *) s_malloc((sizeof *device->hidden));
+	}
+	if ((device == NULL) || (device->hidden == NULL)) {
+		SDL_OutOfMemory();
+		if (device) {
+			s_free(device);
+		}
+		return(0);
+	}
+	memset(device->hidden, 0, (sizeof *device->hidden));
+
+	device->VideoInit = sdl_xynth_VideoInit;
+	device->ListModes = sdl_xynth_ListModes;
+	device->SetVideoMode = sdl_xynth_SetVideoMode;
+	device->ToggleFullScreen = sdl_xynth_ToggleFullScreen;
+	device->UpdateMouse = sdl_xynth_UpdateMouse;
+	device->CreateYUVOverlay = sdl_xynth_CreateYUVOverlay;
+	device->SetColors = sdl_xynth_SetColors;
+	device->UpdateRects = sdl_xynth_UpdateRects;
+	device->VideoQuit = sdl_xynth_VideoQuit;
+
+	device->AllocHWSurface = sdl_xynth_AllocHWSurface;
+	device->CheckHWBlit = NULL;
+	device->FillHWRect = NULL;
+	device->SetHWColorKey = NULL;
+	device->SetHWAlpha = NULL;
+	device->LockHWSurface = sdl_xynth_LockHWSurface;
+	device->UnlockHWSurface = sdl_xynth_UnlockHWSurface;
+	device->FlipHWSurface = NULL;
+	device->FreeHWSurface = sdl_xynth_FreeHWSurface;
+
+	device->SetGamma = NULL;
+	device->GetGamma = NULL;
+	device->SetGammaRamp = NULL;
+	device->GetGammaRamp = NULL;
+
+	device->GL_LoadLibrary = NULL;
+	device->GL_GetProcAddress = NULL;
+	device->GL_GetAttribute = NULL;
+	device->GL_MakeCurrent = NULL;
+	device->GL_SwapBuffers = NULL;
+	
+	device->SetCaption = sdl_xynth_SetCaption;
+	device->SetIcon = NULL;
+	device->IconifyWindow = NULL;
+	device->GrabInput = NULL;
+	device->GetWMInfo = NULL;
+
+	device->FreeWMCursor = sdl_xynth_FreeWMCursor;
+	device->CreateWMCursor = sdl_xynth_CreateWMCursor;
+	device->ShowWMCursor = sdl_xynth_ShowWMCursor;
+	device->WarpWMCursor = sdl_xynth_WarpWMCursor;
+	device->MoveWMCursor = sdl_xynth_MoveWMCursor;
+	device->CheckMouseMode = sdl_xynth_CheckMouseMode;	
+	
+	device->InitOSKeymap = sdl_xynth_InitOSKeymap;
+	device->PumpEvents = sdl_xynth_PumpEvents;
+
+	device->free = sdl_xynth_DeleteDevice;
+
+	return device;
+}
+
+/* Initialize the native video subsystem, filling 'vformat' with the
+   "best" display pixel format, returning 0 or -1 if there's an error.
+ */
+int sdl_xynth_VideoInit(_THIS, SDL_PixelFormat *vformat)
+{
+	if (s_client_init(&this->hidden->window)) {
+		fprintf(stderr, "Could not connect to Xynth!\n");
+		exit(1);
+	}
+
+	vformat->BitsPerPixel = this->hidden->window->surface->bitsperpixel;
+	vformat->BytesPerPixel = this->hidden->window->surface->bytesperpixel;;
+
+	this->info.wm_available = 1;
+
+	return 0;
+}
+
+/* List the available video modes for the given pixel format, sorted
+   from largest to smallest.
+ */
+SDL_Rect **sdl_xynth_ListModes(_THIS, SDL_PixelFormat *format, Uint32 flags)
+{
+   	 return (SDL_Rect **) -1;
+}
+
+/* Set the requested video mode, returning a surface which will be
+   set to the SDL_VideoSurface.  The width and height will already
+   be verified by ListModes(), and the video subsystem is free to
+   set the mode to a supported bit depth different from the one
+   specified -- the desired bpp will be emulated with a shadow
+   surface if necessary.  If a new mode is returned, this function
+   should take care of cleaning up the current mode.
+ */
+SDL_Surface * sdl_xynth_SetVideoMode(_THIS, SDL_Surface *current, int width, int height, int bpp, Uint32 flags)
+{
+	if (this->hidden->buffer) {
+		s_free(this->hidden->buffer);
+	}
+
+        bpp = this->hidden->window->surface->bitsperpixel;
+        if (bpp == 15) {
+		bpp = 16;
+	}
+        
+	this->hidden->buffer = s_malloc(width * height * (bpp / 8));
+        this->hidden->bpp = bpp;
+	memset(this->hidden->buffer, 0, width * height * (bpp / 8));
+
+	if (!SDL_ReallocFormat(current, bpp, 0, 0, 0, 0)) {
+		s_free(this->hidden->buffer);
+		this->hidden->buffer = NULL;
+		SDL_SetError("Couldn't allocate new pixel format for requested mode");
+		return NULL;
+	}
+
+	current->flags = flags & SDL_FULLSCREEN;
+	this->hidden->w = current->w = width;
+	this->hidden->h = current->h = height;
+	current->pitch = current->w * (bpp / 8);
+	current->pixels = this->hidden->buffer;
+
+	s_window_new(this->hidden->window, WINDOW_MAIN, NULL);
+	s_window_set_coor(this->hidden->window, 0, 0, 0, width, height);
+	s_window_set_coor(this->hidden->window, WINDOW_NOFORM, this->hidden->window->surface->buf->x, this->hidden->window->surface->buf->y, width, height);
+	s_window_set_title(this->hidden->window, "Xynth - SDL");
+	s_window_show(this->hidden->window);
+
+	s_client_atexit(this->hidden->window, sdl_xynth_atexit);
+	s_client_atevent(this->hidden->window, sdl_xynth_atevent);
+
+	this->hidden->tid = s_thread_create((void * (*) (void *)) &s_client_main, this->hidden->window);
+	sdl_xynth_running = 1;
+
+	return current ;
+}
+
+/* Toggle the fullscreen mode */
+int sdl_xynth_ToggleFullScreen (_THIS, int on)
+{
+	return -1;
+}
+
+/* This is called after the video mode has been set, to get the
+   initial mouse state.  It should queue events as necessary to
+   properly represent the current mouse focus and position.
+ */
+void sdl_xynth_UpdateMouse (_THIS)
+{
+}
+
+/* Create a YUV video surface (possibly overlay) of the given
+   format.  The hardware should be able to perform at least 2x
+   scaling on display.
+ */
+SDL_Overlay * sdl_xynth_CreateYUVOverlay (_THIS, int width, int height, Uint32 format, SDL_Surface *display)
+{
+	return NULL;
+}
+
+/* Sets the color entries { firstcolor .. (firstcolor+ncolors-1) }
+   of the physical palette to those in 'colors'. If the device is
+   using a software palette (SDL_HWPALETTE not set), then the
+   changes are reflected in the logical palette of the screen
+   as well.
+   The return value is 1 if all entries could be set properly
+   or 0 otherwise.
+ */
+int sdl_xynth_SetColors(_THIS, int firstcolor, int ncolors, SDL_Color *colors)
+{
+	return 1;
+}
+
+/* This pointer should exist in the native video subsystem and should
+   point to an appropriate update function for the current video mode
+ */
+void sdl_xynth_UpdateRects(_THIS, int numrects, SDL_Rect *rects)
+{
+        char *buf;
+        int n = numrects;
+        SDL_Rect *r = rects;
+
+        if (!sdl_xynth_running) {
+		return;
+	}
+	
+	sdl_xynth_running_ = 1;
+	
+        if (this->hidden->bpp != this->hidden->window->surface->bitsperpixel) {
+		s_copybuffer(this->hidden->buffer, this->hidden->bpp, &buf, this->hidden->window->surface->bitsperpixel, this->hidden->w, this->hidden->h);
+	        while (n--) {
+			s_putboxpart(this->hidden->window->surface, r->x, r->y, r->w, r->h, this->hidden->w, this->hidden->h, buf, r->x, r->y);
+			r++;
+		}
+		s_free(buf);
+	} else {
+		while (n--) {
+			s_putboxpart(this->hidden->window->surface, r->x, r->y, r->w, r->h, this->hidden->w, this->hidden->h, this->hidden->buffer, r->x, r->y);
+			r++;
+		}
+	}
+	
+	sdl_xynth_running_ = 0;
+}
+
+/* Reverse the effects VideoInit() -- called if VideoInit() fails
+   or if the application is shutting down the video subsystem.
+ */
+void sdl_xynth_VideoQuit(_THIS)
+{
+	while (sdl_xynth_running_) {
+		usleep(20000);
+	}
+	
+	if (this->screen->pixels != NULL)
+	{
+		s_free(this->screen->pixels);
+		this->screen->pixels = NULL;
+	}
+	
+	if (sdl_xynth_running) {
+		s_client_quit(this->hidden->window);
+		s_thread_join(this->hidden->tid, NULL);
+	}
+	sdl_xynth_running = 0;
+}
diff -Naur SDL-1.2.10/src/video/xynth/SDL_xynthwm.c SDL-1.2.10-xynth/src/video/xynth/SDL_xynthwm.c
--- SDL-1.2.10/src/video/xynth/SDL_xynthwm.c	1970-01-01 02:00:00.000000000 +0200
+++ SDL-1.2.10-xynth/src/video/xynth/SDL_xynthwm.c	2006-05-20 04:48:56.000000000 +0300
@@ -0,0 +1,48 @@
+/***************************************************************************
+    begin                : Thu Jan 22 2004
+    copyright            : (C) 2004 - 2006 by Alper Akcan
+    email                : distchx@yahoo.com
+ ***************************************************************************/
+
+/***************************************************************************
+ *                                                                         *
+ *   This program is free software; you can redistribute it and/or modify  *
+ *   it under the terms of the GNU Lesser General Public License as        *
+ *   published by the Free Software Foundation; either version 2.1 of the  *
+ *   License, or (at your option) any later version.                       *
+ *                                                                         *
+ ***************************************************************************/
+
+#include "SDL_xynth.h"
+
+/* Set the title and icon text */
+void sdl_xynth_SetCaption (_THIS, const char *title, const char *icon)
+{
+	s_window_set_title(this->hidden->window, (char *) title);
+}
+
+/* Set the window icon image */
+void sdl_xynth_SetIcon (_THIS, SDL_Surface *icon, Uint8 *mask)
+{
+}
+
+/* Iconify the window.
+   This function returns 1 if there is a window manager and the
+   window was actually iconified, it returns 0 otherwise.
+*/
+int sdl_xynth_IconifyWindow (_THIS)
+{
+	return 0;
+}
+
+/* Grab or ungrab keyboard and mouse input */
+SDL_GrabMode sdl_xynth_GrabInput (_THIS, SDL_GrabMode mode)
+{
+	return SDL_GRAB_OFF;
+}
+
+/* Get some platform dependent window information */
+int sdl_xynth_GetWMInfo (_THIS, SDL_SysWMinfo *info)
+{
+	return 0;
+}
